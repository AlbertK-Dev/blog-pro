rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
  	function validatingPost(){
    	return 	request.resource.data.title is string &&
              request.resource.data.content is string &&
              request.resource.data.imgURL is string &&
              request.resource.data.album is  list &&
              request.resource.data.author is map && //ajouter hasOnly sur user
              request.resource.data.author.uid is string &&
              request.resource.data.author.pseudo is string &&
              request.resource.data.author.photoURL is string &&
              request.resource.data.creationDate is timestamp &&
              request.resource.data.updateDate is timestamp &&
              request.resource.data.keys().hasOnly([
              	'pid',
              	'title',
                'content',
                'imgURL',
                'author',
                'album',
                'creationDate',
                'updateDate',
                
              ])
    
    }
    
    
    	function validatingComment(){
    	return  request.resource.data.content is string &&  
              request.resource.data.author is map && //ajouter hasOnly sur user
              request.resource.data.author.uid is string &&
              request.resource.data.author.pseudo is string &&
              request.resource.data.author.photoURL is string &&
              request.resource.data.creationDate is timestamp &&
              request.resource.data.updateDate is timestamp &&
              request.resource.data.keys().hasOnly([
              	'cid',
              	'title',
                'content',
                'author',
                'creationDate',
                'updateDate',
                
              ])
    
    }
    
    	function validatingResponse(){
    	return  request.resource.data.content is string &&  
              request.resource.data.author is map && //ajouter hasOnly sur user
              request.resource.data.author.uid is string &&
              request.resource.data.author.pseudo is string &&
              request.resource.data.author.photoURL is string &&
              request.resource.data.creationDate is timestamp &&
              request.resource.data.updateDate is timestamp &&
              request.resource.data.keys().hasOnly([
              	'rid',
              	'title',
                'content',
                'author',
                'creationDate',
                'updateDate',
                
              ])
    
    }
    
    function isAnUserDoc(){
    	return request.auth != null &&  resource.data.author.uid == request.auth.uid
    }
    
   
  
  
    match /users/{uid} {
    	allow read, write:if uid == request.auth.uid;
    
    }
    
    match /{path=**}/posts/{postId}{
    	allow read : if request.auth != null;
    }
    
    match /users/{uid}/posts/{postId}{
    	allow create : if request.auth != null && validatingPost();
      allow update : if isAnUserDoc() && validatingPost();
      allow delete : if isAnUserDoc();
    					
    }
    
    match /{path=**}/posts/{postId}/comments/{commentId}{
    	allow create : if request.auth != null && validatingComment();
      allow update: if isAnUserDoc() && validatingComment();
      allow delete : if isAnUserDoc();
    }
    
     match /{path=**}/posts/{postId}/public/{reactions}{
     allow read, write : if request.auth != null;
    }
    
    match /{path=**}/posts/{postId}/comments/{commentId}/public/{reactions}{
    	allow read, write : if request.auth != null;
    }
    
    match /{path=**}/posts/{postId}/comments/{commentId}/responses/{responseid}{
    	allow read : if request.auth != null;
      allow create : if request.auth != null && validatingResponse();
      allow update: if isAnUserDoc() && validatingResponse();
      allow delete : if isAnUserDoc();
    }
    
    
  }
}